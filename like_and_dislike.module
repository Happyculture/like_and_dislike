<?php

/*
 * @file
 * This module is intended to allow voting in a way of like and dislike buttons
 * similar to Facebook, but with also negative range. Vote is for entities and 
 * comments.
 * The voting is done using AJAX.
 * There is a set of permissions for every content type to view and vote.
 * For example, you could allow anonymous users to see the voting, but not to
 * vote.
 * It alerts a message if someone votes without having permissions to vote.
 *
 * TODO: Comment voting is not fully tested in this version
 *
 * @author Nestor Mata Cuthbert <nestor@profesional.co.cr>
 */

/**
 * Implementing hook_init()
 *
 * Add the required javascript and CSS to the page
 */
function like_and_dislike_init() {
  $module_path = drupal_get_path('module', 'like_and_dislike');
  drupal_add_js($module_path . "/assets/javascripts/LikeDislikeService.js");
  drupal_add_js($module_path . "/assets/javascripts/like_and_dislike.js");
  drupal_add_js("var like_and_dislike_path = '" . $module_path . "';", "inline");
}

/**
 * Implementing hook_permission()
 *
 * Defines view and vote permissions for every content type and a management 
 * permission
 * */
function like_and_dislike_permission() {
  $perms = array();
  $node_types = node_type_get_types();
  foreach ($node_types as $type_name => $type_info) {
    $perms['like node ' . $type_name] = array(
      'title' => t('Add like to %type', array('%type' => $type_info->name)),
      'description' => t('Allow users to add like to the nodes of type %type.', array('%type' => $type_info->name)),
      'restrict access' => TRUE,
    );
    $perms['view likes ' . $type_name] = array(
      'title' => t('View likes of %type', array('%type' => $type_info->name)),
      'description' => t('Allow users to view likes to the nodes of type %type.', array('%type' => $type_info->name)),
      'restrict access' => TRUE,
    );
  }
  $perms['like comment'] = array(
    'title' => t('Add like to comment'),
    'description' => t('Allow users to add like to the comments.'),
    'restrict access' => TRUE,
  );
  $perms['view likes comment'] = array(
    'title' => t('View likes of comments'),
    'description' => t('Allow users to view likes to the comments.'),
    'restrict access' => TRUE,
  );
  $perms['manage like dislike'] = array(
    'title' => t('Manage Like/DisLike options'),
    'description' => t('Manage administrative options of the like/dislike module.'),
    'restrict access' => TRUE,
  );
  return $perms;
}

/**
 * Implementing hook_theme().
 *
 * Defines the themes of the like and dislike buttons and counts
 */
function like_and_dislike_theme() {
  return array(
    'like' => array(
      'template' => 'templates/like',
    ),
    'dislike' => array(
      'template' => 'templates/dislike',
    ),
  );
}

/**
 * Implementing hook_comment_load()
 *
 * Draws the like/dislike buttons in a comment if the user has permission
 */
function like_and_dislike_comment_load($comments) {
  global $user;
  if (!user_access('view likes comment')) {
    return;
  }
  foreach ($comments as $comment) {

    $Comment = new \Drupal\like_and_dislike\Model\Comment($comment->cid);

    $comment->like = theme('like', array(
      'eid' => $comment->cid,
      'likes' => $Comment->getLikesAmount(),
      'likestatus' => $Comment->getLikesAmount($user->uid),
      'entity' => "entity-comment",
    ));
    $comment->dislike = theme('dislike', array(
      'eid' => $comment->cid,
      'dislikes' => $Comment->getDislikesAmount(),
      'dislikestatus' => $Comment->getDislikesAmount($user->uid),
      'entity' => "entity-comment",
    ));
  }
}

/**
 * Implement hook_node_load()
 *
 * Loads the like/dislike information to the node object
 */
function like_and_dislike_node_load($nodes, $types) {
  global $user;
  foreach ($nodes as $node) {

    $Node = new \Drupal\like_and_dislike\Model\Node($node->nid);

    $can_vote = user_access('like node ' . $node->type);
    // Check the voting status based on the permission and if already voted for like or dislike as he can't repeat vote
    if ($user->uid == 0) {
      $ip = ip_address();
      $likestatus = $can_vote ? $Node->getLikesAmount($user->uid, $ip) : 1;
      $dislikestatus = $can_vote ? $Node->getDislikesAmount($user->uid, $ip) : 1;
    }
    else {
      $likestatus = $can_vote ? $Node->getLikesAmount($user->uid) : 1;
      $dislikestatus = $can_vote ? $Node->getDislikesAmount($user->uid) : 1;
    }

    // Add the themed buttons for like/dislike
    $node->like = theme('like', array(
      'eid' => $node->nid,
      'likes' => $Node->getLikesAmount(),
      'likestatus' => $likestatus,
      'entity' => "entity-node",
    ));
    $node->dislike = theme('dislike', array(
      'eid' => $node->nid,
      'dislikes' => $Node->getDislikesAmount(),
      'dislikestatus' => $dislikestatus,
      'entity' => "entity-node",
    ));
  }
}

/**
 * Renders the like/dislike buttons if the user has permission to see it
 */
function like_and_dislike_node_view($node, $view_mode, $langcode) {
  // Don't display the like/dislike if has no permissions to view
  if (user_access('view likes ' . $node->type)) {
    $node->content['like'] = array(
      '#markup' => $node->like,
      '#weight' => 10,
    );
    $node->content['dislike'] = array(
      '#markup' => $node->dislike,
      '#weight' => 11,
    );
  }
  return $node;
}

/**
 * Implements hook_votingapi_metadata_alter().
 */
function like_and_dislike_votingapi_metadata_alter(&$data) {
  // Document several custom tags for rating restaurants and meals.
  $data['tags']['like'] = array(
    'name' => t('Like'),
    'description' => t('A like vote, for positive reviews.'),
  );
  $data['tags']['dislike'] = array(
    'name' => t('Dislike'),
    'description' => t('A dislike vote, for negative reviews.'),
  );
}

/**
 * Implements hook_views_api().
 */
function like_and_dislike_views_api() {
  return array('api' => 3);
}
