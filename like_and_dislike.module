<?php

/*
 * @file
 * This module provides 2 voting widgets: Like and Dislike. The behavior is
 * similar to Facebook and other social networks, but with negative rating also.
 */

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\votingapi\Entity\Vote;

/**
 * Implements hook_entity_load().
 *
 * Loads the like/dislike information to the entity object.
 */
function like_and_dislike_entity_load(array $entities, $entity_type_id) {
  /** @var \Drupal\like_and_dislike\LikeDislikeHelperInterface $helper */
  $helper = \Drupal::service('like_dislike.helper');
  $vote_result_storage = \Drupal::entityManager()->getStorage('vote_result');

  foreach ($entities as $entity) {
    if ($helper->isAvailableForEntity($entity)) {
      $like = $vote_result_storage->getEntityResults(
        $entity_type_id, $entity->id(), 'like', 'vote_count'
      );
      $entity->like = !empty($like) ? current($like)->getValue() : 0;
      $dislike = $vote_result_storage->getEntityResults(
        $entity_type_id, $entity->id(), 'dislike', 'vote_count'
      );
      $entity->dislike = !empty($dislike) ? current($dislike)->getValue() : 0;
    }
  }
}

/**
 * Implements hook_entity_view().
 *
 * Renders the like/dislike buttons if the user has permission to see it.
 */
function like_and_dislike_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\like_and_dislike\LikeDislikeHelperInterface $helper */
  $helper = \Drupal::service('like_dislike.helper');
  /** @var \Drupal\Core\Session\AccountInterface $account */
  $account = \Drupal::currentUser();

  $enabled_view_modes = ['full'];
  $entity_type_ids_available_to_vote = \Drupal\like_and_dislike\LikeDislikePermissions::getEntityTypesAvailableToVote();

  if (
    in_array($entity->getEntityTypeId(), $entity_type_ids_available_to_vote)
    && in_array($view_mode, $enabled_view_modes)
    && $helper->isAvailableForEntity($entity)
  ) {
    $entity_type_id = $entity->getEntityTypeId();
    $links = [];
    if ($account->hasPermission("add or remove like votes on $entity_type_id")) {
      $links['like'] = \Drupal\Core\Link::fromTextAndUrl(
        $entity->like . ' Like',
        $helper->getLikeUrl($entity)
      );
      $links['dislike'] = \Drupal\Core\Link::fromTextAndUrl(
        $entity->dislike . ' Dislike',
        $helper->getDislikeUrl($entity)
      );
    }
    else {
      $links['like'] = $entity->like . ' Like';
      $links['dislike'] = $entity->dislike . ' Dislike';
    }

    $build['votingapi_links'] = array(
      '#theme' => 'item_list__votingapi',
      '#items' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Removes a previous like when dislinking an entity and reverse.
 */
function like_and_dislike_vote_insert(Vote $vote) {
  $vote_type_to_delete = 'dislike';
  if ($vote->bundle() == 'dislike') {
    $vote_type_to_delete = 'like';
  }

  \Drupal::service('like_dislike.helper')->unvote(
    $vote->getVotedEntityType(),
    $vote->getVotedEntityId(),
    $vote_type_to_delete,
    $vote->getOwner()
  );
}
